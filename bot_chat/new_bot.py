# save as app.py
import streamlit as st
import json
import re
from difflib import SequenceMatcher
import random

# Configure page
st.set_page_config(
    page_title="COVID-19 Healthcare Assistant",
    page_icon="ü¶†",
    layout="wide"
)


# Load knowledge base
@st.cache_data
def load_knowledge_base():
    try:
        # Load all knowledge bases
        knowledge_bases = {}
        
        # Load COVID-19 knowledge base
        with open('data/covid.json', 'r', encoding='utf-8') as f:
            covid_kb = json.load(f)
            knowledge_bases["covid19"] = covid_kb["covid19_knowledge_base"]
            
        # Load Cold knowledge base
        with open('data/cold.json', 'r', encoding='utf-8') as f:
            cold_kb = json.load(f)
            knowledge_bases["cold"] = cold_kb
            
        # Load Allergy knowledge base
        with open('data/allergy.json', 'r', encoding='utf-8') as f:
            allergy_kb = json.load(f)
            knowledge_bases["allergy"] = allergy_kb
            
        # Load Flu knowledge base
        with open('data/flu.json', 'r', encoding='utf-8') as f:
            flu_kb = json.load(f)
            knowledge_bases["flu"] = flu_kb
            
        return knowledge_bases
    except FileNotFoundError as e:
        st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file knowledge base: {str(e)}")
        return None
    except json.JSONDecodeError:
        st.error("‚ö†Ô∏è L·ªói ƒë·ªçc file JSON. Vui l√≤ng ki·ªÉm tra c√∫ ph√°p file.")
        return None


# Similarity function for fuzzy matching
def similarity(a, b):
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()


# Check for emergency keywords
def is_emergency(text):
    emergency_keywords = [
        "kh√≥ th·ªü nghi√™m tr·ªçng", "ƒëau ng·ª±c", "l√∫ l·∫´n", "m√¥i xanh",
        "m·∫•t √Ω th·ª©c", "c·∫•p c·ª©u", "nguy k·ªãch", "nghi√™m tr·ªçng"
    ]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in emergency_keywords)


# COVID-19 symptom analysis
def analyze_covid_symptoms(text):
    symptoms = {
        "s·ªët": ["s·ªët", "n√≥ng ng∆∞·ªùi", "·ªõn l·∫°nh"],
        "ho": ["ho", "ho khan", "ho c√≥ ƒë·ªùm"],
        "ƒëau h·ªçng": ["ƒëau h·ªçng", "r√°t h·ªçng", "kh√≥ nu·ªët"],
        "kh√≥ th·ªü": ["kh√≥ th·ªü", "th·ªü kh√≥", "ng·∫°t th·ªü"],
        "m·ªát m·ªèi": ["m·ªát", "m·ªát m·ªèi", "ki·ªát s·ª©c"],
        "ƒëau ƒë·∫ßu": ["ƒëau ƒë·∫ßu", "nh·ª©c ƒë·∫ßu"],
        "m·∫•t v·ªã gi√°c": ["m·∫•t v·ªã", "kh√¥ng c·∫£m nh·∫≠n v·ªã"],
        "m·∫•t kh·ª©u gi√°c": ["m·∫•t m√πi", "kh√¥ng ng·ª≠i ƒë∆∞·ª£c"]
    }

    detected_symptoms = []
    text_lower = text.lower()

    for symptom, keywords in symptoms.items():
        if any(keyword in text_lower for keyword in keywords):
            detected_symptoms.append(symptom)

    return detected_symptoms


# Risk assessment based on symptoms
def assess_covid_risk(symptoms):
    if not symptoms:
        return "th·∫•p", 0.2

    high_risk_symptoms = ["kh√≥ th·ªü", "ƒëau ng·ª±c", "s·ªët cao"]
    medium_risk_symptoms = ["s·ªët", "ho", "ƒëau h·ªçng"]

    risk_score = 0
    for symptom in symptoms:
        if any(hrs in symptom for hrs in high_risk_symptoms):
            risk_score += 0.4
        elif any(mrs in symptom for mrs in medium_risk_symptoms):
            risk_score += 0.2
        else:
            risk_score += 0.1

    if risk_score >= 0.6:
        return "cao", min(risk_score, 0.95)
    elif risk_score >= 0.3:
        return "trung b√¨nh", risk_score
    else:
        return "th·∫•p", risk_score


def format_allergy_info(info, specific_symptom=None):
    if isinstance(info, dict):
        if 'common_symptoms' in info:
            formatted = ""
            if specific_symptom:
                # T√°ch tri·ªáu ch·ª©ng th√†nh c√°c t·ª´ ri√™ng l·∫ª
                symptom_words = specific_symptom.lower().split()
                found_system = None
                found_symptoms = []
                related_symptoms = []

                # T√¨m ki·∫øm trong c√°c h·ªá th·ªëng
                for system in info['common_symptoms']:
                    for symptom in system['symptoms']:
                        symptom_lower = symptom.lower()
                        # Ki·ªÉm tra xem c√≥ t·ª´ kh√≥a n√†o trong tri·ªáu ch·ª©ng c·ª• th·ªÉ kh·ªõp v·ªõi tri·ªáu ch·ª©ng trong h·ªá th·ªëng kh√¥ng
                        if any(word in symptom_lower for word in symptom_words):
                            found_system = system
                            found_symptoms.append(symptom)
                        elif any(word in symptom_lower for word in symptom_words):
                            related_symptoms.append(symptom)

                if found_system:
                    formatted += f"**Tri·ªáu ch·ª©ng '{specific_symptom}' c√≥ th·ªÉ li√™n quan ƒë·∫øn h·ªá th·ªëng {found_system['system']}:**\n\n"
                    
                    # Th√™m th√¥ng tin v·ªÅ tri·ªáu ch·ª©ng ch√≠nh
                    formatted += "**Tri·ªáu ch·ª©ng ch√≠nh:**\n"
                    for symptom in found_symptoms:
                        formatted += f"- {symptom}\n"
                    formatted += "\n"

                    # Th√™m th√¥ng tin v·ªÅ c√°c tri·ªáu ch·ª©ng li√™n quan
                    if related_symptoms:
                        formatted += "**C√°c tri·ªáu ch·ª©ng li√™n quan c√≥ th·ªÉ g·∫∑p:**\n"
                        for symptom in related_symptoms:
                            formatted += f"- {symptom}\n"
                        formatted += "\n"

                    # Th√™m th√¥ng tin v·ªÅ c√°c tri·ªáu ch·ª©ng kh√°c c·ªßa h·ªá th·ªëng
                    formatted += f"**C√°c tri·ªáu ch·ª©ng kh√°c c·ªßa h·ªá th·ªëng {found_system['system']}:**\n"
                    for symptom in found_system['symptoms']:
                        if symptom not in found_symptoms and symptom not in related_symptoms:
                            formatted += f"- {symptom}\n"
                    formatted += "\n"

                    # Th√™m th√¥ng tin v·ªÅ ƒëi·ªÅu tr·ªã n·∫øu c√≥
                    if 'approaches' in info.get('treatment', {}):
                        formatted += "**C√°c ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã c√≥ th·ªÉ √°p d·ª•ng:**\n"
                        for approach in info['treatment']['approaches']:
                            formatted += f"- {approach['method']}: {approach['description']}\n"
                else:
                    formatted = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin c·ª• th·ªÉ v·ªÅ tri·ªáu ch·ª©ng '{specific_symptom}'. "
                    formatted += "D∆∞·ªõi ƒë√¢y l√† c√°c tri·ªáu ch·ª©ng d·ªã ·ª©ng ph·ªï bi·∫øn:\n\n"
                    for system in info['common_symptoms']:
                        formatted += f"**{system['system']}:**\n"
                        for symptom in system['symptoms']:
                            formatted += f"- {symptom}\n"
                        formatted += "\n"
            else:
                formatted = "**Tri·ªáu ch·ª©ng d·ªã ·ª©ng theo h·ªá th·ªëng:**\n\n"
                for system in info['common_symptoms']:
                    formatted += f"**{system['system']}:**\n"
                    for symptom in system['symptoms']:
                        formatted += f"- {symptom}\n"
                    formatted += "\n"
            
            if 'note' in info:
                formatted += f"*L∆∞u √Ω: {info['note']}*\n"
            return formatted
    return str(info)

def format_flu_info(info):
    if isinstance(info, dict):
        formatted = ""
        if 'common_symptoms' in info:
            formatted += "**Tri·ªáu ch·ª©ng ph·ªï bi·∫øn:**\n"
            for symptom in info['common_symptoms']:
                formatted += f"- {symptom}\n"
            formatted += "\n"
        if 'less_common_symptoms' in info:
            formatted += "**Tri·ªáu ch·ª©ng √≠t g·∫∑p h∆°n:**\n"
            for symptom in info['less_common_symptoms']:
                formatted += f"- {symptom}\n"
            formatted += "\n"
        if 'duration' in info:
            formatted += f"**Th·ªùi gian b·ªánh:** {info['duration']}\n\n"
        if 'distinction_from_common_cold' in info:
            formatted += f"**Ph√¢n bi·ªát v·ªõi c·∫£m l·∫°nh:** {info['distinction_from_common_cold']}\n"
        return formatted
    return str(info)

def format_cold_info(info):
    if isinstance(info, dict):
        formatted = ""
        if 'definition' in info:
            formatted += f"{info['definition']}\n\n"
        if 'symptoms' in info:
            formatted += "**Tri·ªáu ch·ª©ng:**\n"
            for symptom in info['symptoms']:
                formatted += f"- {symptom}\n"
            formatted += "\n"
        if 'treatment' in info:
            formatted += "**ƒêi·ªÅu tr·ªã:**\n"
            for treatment in info['treatment']:
                formatted += f"- {treatment}\n"
        return formatted
    return str(info)

def format_covid_info(info):
    if isinstance(info, dict):
        formatted = ""
        if 'question' in info and 'answer' in info:
            formatted += f"{info['answer']}\n"
        return formatted
    return str(info)

# Find best matching answer from knowledge base
def find_best_answer(user_input, kb):
    if not kb:
        return None, None, []

    best_match = None
    best_score = 0
    matched_disease = None
    detected_symptoms = []

    # Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ tri·ªáu ch·ª©ng c·ª• th·ªÉ kh√¥ng
    symptom_keywords = ["b·ªã", "c√≥", "tri·ªáu ch·ª©ng", "d·∫•u hi·ªáu", "bi·ªÉu hi·ªán", "ƒëau", "ng·ª©a", "s∆∞ng", "n·ªïi", "m·∫©n", "l·∫°nh", "s·ªët", "ho"]
    specific_symptom = None
    
    # T√¨m t·ª´ kh√≥a tri·ªáu ch·ª©ng trong c√¢u h·ªèi
    for keyword in symptom_keywords:
        if keyword in user_input.lower():
            # T√°ch t·ª´ sau t·ª´ kh√≥a ƒë·ªÉ l·∫•y tri·ªáu ch·ª©ng
            parts = user_input.lower().split(keyword)
            if len(parts) > 1:
                # L·∫•y ph·∫ßn c√≤n l·∫°i c·ªßa c√¢u l√†m tri·ªáu ch·ª©ng
                specific_symptom = parts[1].strip()
                # Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt
                specific_symptom = specific_symptom.replace("l√† g√¨", "").replace("?", "").strip()
                break

    # T√¨m ki·∫øm trong t·∫•t c·∫£ c√°c knowledge base
    disease_scores = {}
    disease_matches = {}
    disease_symptoms = {}

    # COVID-19
    if "covid19" in kb:
        covid_score = 0
        covid_match = None
        covid_symptoms = []
        
        covid_categories = kb["covid19"]["categories"]
        for category_key, category in covid_categories.items():
            for item in category["data"]:
                # Check intent matching
                for intent in category.get("intent", []):
                    if intent.lower() in user_input.lower():
                        score = similarity(user_input, intent)
                        if score > covid_score:
                            covid_score = score
                            covid_match = item

                # Check question similarity
                question_score = similarity(user_input, item["question"])
                if question_score > covid_score:
                    covid_score = question_score
                    covid_match = item

                # Check keywords
                for keyword in item.get("keywords", []):
                    if keyword.lower() in user_input.lower():
                        keyword_score = similarity(user_input, keyword) * 0.8
                        if keyword_score > covid_score:
                            covid_score = keyword_score
                            covid_match = item

        # Analyze COVID-19 symptoms
        symptoms = analyze_covid_symptoms(user_input)
        if symptoms:
            covid_symptoms = symptoms
            covid_score += 0.2  # TƒÉng ƒëi·ªÉm n·∫øu ph√°t hi·ªán tri·ªáu ch·ª©ng

        disease_scores["covid19"] = covid_score
        disease_matches["covid19"] = covid_match
        disease_symptoms["covid19"] = covid_symptoms

    # Cold
    if "cold" in kb:
        cold_score = 0
        cold_match = None
        cold_symptoms = []
        
        for intent_type, intents in kb["cold"]["chatbot_intents"].items():
            for intent in intents:
                if intent.lower() in user_input.lower():
                    for category_key, category in kb["cold"]["categories"].items():
                        if intent_type in category_key:
                            response = {
                                "question": f"Th√¥ng tin v·ªÅ {intent_type} c·ªßa b·ªánh c·∫£m l·∫°nh",
                                "answer": format_cold_info(category)
                            }
                            score = similarity(user_input, intent)
                            if score > cold_score:
                                cold_score = score
                                cold_match = response

        # Analyze cold symptoms
        cold_symptom_list = ["s·ªï m≈©i", "ngh·∫πt m≈©i", "ƒëau h·ªçng", "ho", "h·∫Øt h∆°i", "ƒëau ƒë·∫ßu nh·∫π", "s·ªët nh·∫π", "l·∫°nh", "·ªõn l·∫°nh"]
        for symptom in cold_symptom_list:
            if symptom in user_input.lower():
                cold_symptoms.append(symptom)
                cold_score += 0.2  # TƒÉng ƒëi·ªÉm n·∫øu ph√°t hi·ªán tri·ªáu ch·ª©ng

        disease_scores["cold"] = cold_score
        disease_matches["cold"] = cold_match
        disease_symptoms["cold"] = cold_symptoms

    # Flu
    if "flu" in kb:
        flu_score = 0
        flu_match = None
        flu_symptoms = []
        
        for topic in kb["flu"]["topics"]:
            # Check topic name
            topic_score = similarity(user_input, topic["name"])
            if topic_score > flu_score:
                flu_score = topic_score
                flu_match = {
                    "question": topic["name"],
                    "answer": format_flu_info(topic["information"])
                }

            # Check information content
            if isinstance(topic["information"], dict):
                for key, value in topic["information"].items():
                    if isinstance(value, str):
                        content_score = similarity(user_input, value)
                        if content_score > flu_score:
                            flu_score = content_score
                            flu_match = {
                                "question": topic["name"],
                                "answer": format_flu_info(topic["information"])
                            }

        # Analyze flu symptoms
        flu_symptom_list = ["s·ªët cao", "·ªõn l·∫°nh", "ƒëau c∆°", "m·ªát m·ªèi", "ho", "ƒëau h·ªçng", "ƒëau ƒë·∫ßu", "s·ªï m≈©i", "l·∫°nh"]
        for symptom in flu_symptom_list:
            if symptom in user_input.lower():
                flu_symptoms.append(symptom)
                flu_score += 0.2  # TƒÉng ƒëi·ªÉm n·∫øu ph√°t hi·ªán tri·ªáu ch·ª©ng

        disease_scores["flu"] = flu_score
        disease_matches["flu"] = flu_match
        disease_symptoms["flu"] = flu_symptoms

    # Allergy
    if "allergy" in kb:
        allergy_score = 0
        allergy_match = None
        allergy_symptoms = []
        
        for topic in kb["allergy"]["topics"]:
            # Check topic name
            topic_score = similarity(user_input, topic["name"])
            if topic_score > allergy_score:
                allergy_score = topic_score
                allergy_match = {
                    "question": topic["name"],
                    "answer": format_allergy_info(topic["information"], specific_symptom)
                }

            # Check information content
            if isinstance(topic["information"], dict):
                for key, value in topic["information"].items():
                    if isinstance(value, str):
                        content_score = similarity(user_input, value)
                        if content_score > allergy_score:
                            allergy_score = content_score
                            allergy_match = {
                                "question": topic["name"],
                                "answer": format_allergy_info(topic["information"], specific_symptom)
                            }

        # Analyze allergy symptoms
        allergy_symptom_list = ["h·∫Øt h∆°i", "ng·ª©a m≈©i", "ch·∫£y n∆∞·ªõc m≈©i", "ng·ª©a m·∫Øt", "ph√°t ban", "n·ªïi m·ªÅ ƒëay", "ng·ª©a da", "ng·ª©a", "m·∫©n ng·ª©a", "n·ªïi m·ª•n n∆∞·ªõc", "bong tr√≥c da", "ch√†m"]
        for symptom in allergy_symptom_list:
            if symptom in user_input.lower():
                allergy_symptoms.append(symptom)
                allergy_score += 0.2  # TƒÉng ƒëi·ªÉm n·∫øu ph√°t hi·ªán tri·ªáu ch·ª©ng

        disease_scores["allergy"] = allergy_score
        disease_matches["allergy"] = allergy_match
        disease_symptoms["allergy"] = allergy_symptoms

    # T√¨m b·ªánh c√≥ ƒëi·ªÉm cao nh·∫•t
    best_disease = max(disease_scores.items(), key=lambda x: x[1])
    if best_disease[1] > 0.3:  # Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ n·∫øu ƒëi·ªÉm s·ªë ƒë·ªß cao
        return disease_matches[best_disease[0]], best_disease[0], disease_symptoms[best_disease[0]]
    
    return None, None, []


# Generate COVID-19 specific recommendations
def generate_covid_recommendations(symptoms, risk_level):
    base_recommendations = [
        "üè† C√°ch ly t·∫°i nh√† √≠t nh·∫•t 5 ng√†y",
        "üò∑ ƒêeo kh·∫©u trang khi ti·∫øp x√∫c v·ªõi ng∆∞·ªùi kh√°c",
        "üö∞ U·ªëng nhi·ªÅu n∆∞·ªõc, ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß",
        "üå°Ô∏è Theo d√µi th√¢n nhi·ªát th∆∞·ªùng xuy√™n"
    ]

    if risk_level == "cao":
        base_recommendations.extend([
            "üè• Li√™n h·ªá b√°c sƒ© ngay l·∫≠p t·ª©c",
            "üìû G·ªçi hotline COVID-19: 19009095",
            "‚ö†Ô∏è ƒê·∫øn b·ªánh vi·ªán n·∫øu kh√≥ th·ªü tƒÉng"
        ])
    elif risk_level == "trung b√¨nh":
        base_recommendations.extend([
            "üìû Li√™n h·ªá tr·∫°m y t·∫ø ƒë·ªãa ph∆∞∆°ng",
            "üß™ Xem x√©t l√†m x√©t nghi·ªám COVID-19"
        ])

    return base_recommendations


# Main UI
def main():
    st.title("üè• H·ªá th·ªëng T∆∞ v·∫•n S·ª©c kh·ªèe AI")
    st.markdown("üí¨ **H·ªèi ƒë√°p th√¥ng tin v·ªÅ c√°c b·ªánh th∆∞·ªùng g·∫∑p v·ªõi AI**")

    # Load knowledge base
    kb = load_knowledge_base()
    if not kb:
        st.stop()

    # Sidebar with quick info
    with st.sidebar:
        st.header("üìã Th√¥ng tin nhanh")
        st.markdown("""
        **Hotline kh·∫©n c·∫•p:**
        - üö® C·∫•p c·ª©u: **115**
        - üìû COVID-19: **19009095**
        - üè• B·ªô Y t·∫ø: **19003228**

        **Tri·ªáu ch·ª©ng c·∫ßn c·∫•p c·ª©u:**
        - Kh√≥ th·ªü nghi√™m tr·ªçng
        - ƒêau ng·ª±c dai d·∫≥ng
        - M√¥i xanh t√≠m
        - L√∫ l·∫´n, m·∫•t √Ω th·ª©c
        - S·ªëc ph·∫£n v·ªá (d·ªã ·ª©ng)
        - S·ªët cao k√©o d√†i
        """)

        st.markdown("---")
        st.markdown("**Ph√≤ng ng·ª´a c∆° b·∫£n:**")
        st.markdown("- üò∑ ƒêeo kh·∫©u trang khi c·∫ßn")
        st.markdown("- üßº R·ª≠a tay th∆∞·ªùng xuy√™n")
        st.markdown("- üìè Gi·ªØ kho·∫£ng c√°ch an to√†n")
        st.markdown("- üíâ Ti√™m v·∫Øc xin ƒë·∫ßy ƒë·ªß")
        st.markdown("- üè† Gi·ªØ ·∫•m c∆° th·ªÉ")
        st.markdown("- ü•ó ƒÇn u·ªëng ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng")
        st.markdown("- üåø Tr√°nh c√°c t√°c nh√¢n g√¢y d·ªã ·ª©ng")

    # Initialize chat history
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
        # Add welcome message
        welcome_msg = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω s·ª©c kh·ªèe AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√¥ng tin v·ªÅ COVID-19, c·∫£m l·∫°nh, c√∫m, d·ªã ·ª©ng v√† c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe kh√°c. B·∫°n mu·ªën h·ªèi g√¨?"
        st.session_state.chat_history.append(("AI", welcome_msg))

    # Clear chat button
    if st.button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán"):
        # X√≥a l·ªãch s·ª≠ chat
        st.session_state.chat_history = []
        # Th√™m l·∫°i tin nh·∫Øn ch√†o m·ª´ng
        welcome_msg = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω s·ª©c kh·ªèe AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√¥ng tin v·ªÅ COVID-19, c·∫£m l·∫°nh, c√∫m, d·ªã ·ª©ng v√† c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe kh√°c. B·∫°n mu·ªën h·ªèi g√¨?"
        st.session_state.chat_history.append(("AI", welcome_msg))
        # X√≥a input c·ªßa ng∆∞·ªùi d√πng
        st.session_state.user_input = ""
        # L√†m m·ªõi trang
        st.rerun()

    # Chat input
    user_input = st.text_input("üí≠ B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ s·ª©c kh·ªèe?", key="user_input")

    # Process user input
    if user_input:
        # Add user message to chat
        st.session_state.chat_history.append(("User", user_input))

        # Check for emergency
        if is_emergency(user_input):
            emergency_response = "‚ö†Ô∏è **C·∫¢NH B√ÅO KH·∫®N C·∫§P!**\n\nVui l√≤ng g·ªçi ngay s·ªë c·∫•p c·ª©u 115 ho·∫∑c ƒë·∫øn b·ªánh vi·ªán g·∫ßn nh·∫•t n·∫øu b·∫°n ƒëang g·∫∑p c√°c tri·ªáu ch·ª©ng nghi√™m tr·ªçng nh∆∞ kh√≥ th·ªü, ƒëau ng·ª±c, m√¥i xanh t√≠m, ho·∫∑c m·∫•t √Ω th·ª©c."
            st.session_state.chat_history.append(("AI", emergency_response))
        else:
            # Find answer from knowledge base
            answer, matched_disease, detected_symptoms = find_best_answer(user_input, kb)

            if answer:
                response = f"**üìã {answer['question']}**\n\n{answer['answer']}"

                # Add disease-specific analysis if symptoms detected
                if detected_symptoms:
                    if matched_disease == "covid19":
                        risk_level, confidence = assess_covid_risk(detected_symptoms)
                        response += f"\n\n**üîç Ph√¢n t√≠ch tri·ªáu ch·ª©ng COVID-19:**"
                        response += f"\n- Tri·ªáu ch·ª©ng ph√°t hi·ªán: {', '.join(detected_symptoms)}"
                        response += f"\n- M·ª©c ƒë·ªô nguy c∆°: **{risk_level}** ({int(confidence * 100)}%)"

                        # Add COVID-19 recommendations
                        recommendations = generate_covid_recommendations(detected_symptoms, risk_level)
                        response += f"\n\n**üíä Khuy·∫øn ngh·ªã cho COVID-19:**"
                        for rec in recommendations:
                            response += f"\n{rec}"
                    elif matched_disease == "cold":
                        response += f"\n\n**üîç Ph√¢n t√≠ch tri·ªáu ch·ª©ng c·∫£m l·∫°nh:**"
                        response += f"\n- Tri·ªáu ch·ª©ng ph√°t hi·ªán: {', '.join(detected_symptoms)}"
                        response += f"\n- Khuy·∫øn ngh·ªã: Ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc, gi·ªØ ·∫•m c∆° th·ªÉ"
                    elif matched_disease == "flu":
                        response += f"\n\n**üîç Ph√¢n t√≠ch tri·ªáu ch·ª©ng c√∫m:**"
                        response += f"\n- Tri·ªáu ch·ª©ng ph√°t hi·ªán: {', '.join(detected_symptoms)}"
                        response += f"\n- Khuy·∫øn ngh·ªã: Ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc, d√πng thu·ªëc h·∫° s·ªët n·∫øu c·∫ßn"
                    elif matched_disease == "allergy":
                        response += f"\n\n**üîç Ph√¢n t√≠ch tri·ªáu ch·ª©ng d·ªã ·ª©ng:**"
                        response += f"\n- Tri·ªáu ch·ª©ng ph√°t hi·ªán: {', '.join(detected_symptoms)}"
                        response += f"\n- Khuy·∫øn ngh·ªã: Tr√°nh ti·∫øp x√∫c v·ªõi t√°c nh√¢n g√¢y d·ªã ·ª©ng, d√πng thu·ªëc kh√°ng histamine n·∫øu c·∫ßn"

                # Add disclaimer
                response += f"\n\n‚ö†Ô∏è L∆∞u √Ω: Th√¥ng tin t√¥i cung c·∫•p ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. ƒê·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã ch√≠nh x√°c, b·∫°n c·∫ßn tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ho·∫∑c c∆° s·ªü y t·∫ø c√≥ th·∫©m quy·ªÅn."

            else:
                # Fallback response
                response = "Xin l·ªói, t√¥i ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ h·ªèi l·∫°i theo c√°ch kh√°c ho·∫∑c li√™n h·ªá v·ªõi b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n."

            st.session_state.chat_history.append(("AI", response))

    # Display chat history
    st.markdown("### üí¨ Cu·ªôc tr√≤ chuy·ªán")
    chat_container = st.container()

    with chat_container:
        for i, (speaker, message) in enumerate(st.session_state.chat_history):
            if speaker == "User":
                st.markdown(
                    f"""
                    <div style="text-align: right; margin: 10px 0;">
                        <div style="display: inline-block; background-color: #007bff; color: white; 
                                    padding: 10px 15px; border-radius: 15px 15px 5px 15px; max-width: 70%;">
                            <strong>üë§ B·∫°n:</strong> {message}
                        </div>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            else:
                st.markdown(
                    f"""
                    <div style="text-align: left; margin: 10px 0;">
                        <div style="display: inline-block; background-color: #f8f9fa; color: black; 
                                    padding: 10px 15px; border-radius: 15px 15px 15px 5px; max-width: 70%;
                                    border-left: 4px solid #28a745;">
                            <strong>ü§ñ AI:</strong><br>{message}
                        </div>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

    # Quick action buttons
    st.markdown("### üöÄ C√¢u h·ªèi g·ª£i √Ω")
    col1, col2, col3, col4 = st.columns(4)

    quick_questions = [
        "Tri·ªáu ch·ª©ng c√∫m l√† g√¨?",
        "C√°ch ph√≤ng ng·ª´a d·ªã ·ª©ng?",
        "ƒêi·ªÅu tr·ªã c·∫£m l·∫°nh t·∫°i nh√†?",
        "D·∫•u hi·ªáu s·ªëc ph·∫£n v·ªá?"
    ]

    cols = [col1, col2, col3, col4]
    for i, question in enumerate(quick_questions):
        if cols[i].button(question, key=f"quick_{i}"):
            st.session_state.chat_history.append(("User", question))
            st.rerun()


if __name__ == "__main__":
    main()