from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json
from difflib import SequenceMatcher
from typing import List, Optional
import uvicorn

# Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ bot_chat.py
from bot_chat import (
    load_knowledge_base,
    load_ontology_data,
    find_best_answer,
    is_emergency,
    analyze_covid_symptoms,
    assess_covid_risk,
    generate_covid_recommendations
)

app = FastAPI(
    title="Healthcare Chatbot API",
    description="API cho h·ªá th·ªëng t∆∞ v·∫•n s·ª©c kh·ªèe AI",
    version="1.0.0"
)

class ChatRequest(BaseModel):
    message: str

class ChatResponse(BaseModel):
    response: str
    is_emergency: bool
    matched_disease: Optional[str] = None
    detected_symptoms: Optional[List[str]] = None
    risk_level: Optional[str] = None
    confidence: Optional[float] = None
    recommendations: Optional[List[str]] = None

def format_response_for_client(response_text):
    """Format response cho client - lo·∫°i b·ªè markdown, gi·ªØ emoji v√† xu·ªëng d√≤ng"""
    if not response_text:
        return ""
    
    # Lo·∫°i b·ªè markdown ** v√† *
    formatted = response_text.replace("**", "")
    formatted = formatted.replace("*", "")
    
    # L√†m s·∫°ch format th·ª´a
    formatted = formatted.replace('\n\n\n', '\n\n').strip()
    
    return formatted

# Load knowledge base v√† ontology khi kh·ªüi ƒë·ªông API
kb = load_knowledge_base()
ontology_data = load_ontology_data()

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    try:
        # Ki·ªÉm tra tin nh·∫Øn kh·∫©n c·∫•p
        if is_emergency(request.message):
            emergency_text = "‚ö†Ô∏è **C·∫¢NH B√ÅO KH·∫®N C·∫§P!**\n\nVui l√≤ng g·ªçi ngay s·ªë c·∫•p c·ª©u 115 ho·∫∑c ƒë·∫øn b·ªánh vi·ªán g·∫ßn nh·∫•t n·∫øu b·∫°n ƒëang g·∫∑p c√°c tri·ªáu ch·ª©ng nghi√™m tr·ªçng nh∆∞ kh√≥ th·ªü, ƒëau ng·ª±c, m√¥i xanh t√≠m, ho·∫∑c m·∫•t √Ω th·ª©c."
            return ChatResponse(
                response=format_response_for_client(emergency_text),
                is_emergency=True
            )

        # T√¨m c√¢u tr·∫£ l·ªùi t·ª´ knowledge base v√† ontology
        answer, matched_disease, detected_symptoms = find_best_answer(request.message, kb, ontology_data)

        if answer:
            # Lo·∫°i b·ªè ti√™u ƒë·ªÅ cho social v√† symptom analysis
            if matched_disease in ["social", "symptom_analysis"]:
                response = answer['answer']
            else:
                response = f"**üìã {answer['question']}**\n\n{answer['answer']}"
            
            # Th√™m ph√¢n t√≠ch tri·ªáu ch·ª©ng n·∫øu c√≥
            risk_level = None
            confidence = None
            recommendations = None

            if detected_symptoms:
                if matched_disease == "covid19":
                    risk_level, confidence = assess_covid_risk(detected_symptoms)
                    recommendations = generate_covid_recommendations(detected_symptoms, risk_level)

            return ChatResponse(
                response=format_response_for_client(response),
                is_emergency=False,
                matched_disease=matched_disease,
                detected_symptoms=detected_symptoms,
                risk_level=risk_level,
                confidence=confidence,
                recommendations=recommendations
            )
        else:
            fallback_text = "Xin l·ªói, t√¥i ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ h·ªèi l·∫°i theo c√°ch kh√°c ho·∫∑c li√™n h·ªá v·ªõi b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n."
            return ChatResponse(
                response=format_response_for_client(fallback_text),
                is_emergency=False
            )

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8009) 